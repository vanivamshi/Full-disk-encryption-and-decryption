# -*- coding: utf-8 -*-
"""full_disk_encryption.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iTe-EibhaZ8b7uaFO3PaX3coLMDi4CK9
"""

import subprocess
import logging

# Configure logging
logging.basicConfig(filename='bitlocker_decryption.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def check_bitlocker_status(drive_letter):
    """
    Checks the BitLocker status of the specified drive.

    Parameters:
        drive_letter (str): The letter of the drive to check (e.g., 'C').

    Returns:
        str: The status of BitLocker on the drive.
    """
    try:
        result = subprocess.run(
            ["powershell", "-Command", f"Get-BitLockerVolume -MountPoint {drive_letter}: | Select-Object -ExpandProperty VolumeStatus"],
            capture_output=True, text=True, check=True
        )
        status = result.stdout.strip()
        logging.info(f"BitLocker status on drive {drive_letter}: {status}")
        return status
    except subprocess.CalledProcessError as e:
        logging.error(f"Error checking BitLocker status: {e}")
        raise

def disable_bitlocker(drive_letter):
    """
    Disables BitLocker and decrypts the specified drive.

    Parameters:
        drive_letter (str): The letter of the drive to decrypt (e.g., 'C').
    """
    # Check BitLocker status before disabling
    status = check_bitlocker_status(drive_letter)
    if "FullyEncrypted" in status:
        print(f"Drive {drive_letter} is already fully encrypted. No action needed.")
        return

    # Confirm user action
    confirmation = input(f"Are you sure you want to disable BitLocker and decrypt drive {drive_letter}? (yes/no): ").lower()
    if confirmation != 'yes':
        print("Operation cancelled.")
        return

    # Disable BitLocker and start decryption
    print(f"Disabling BitLocker and starting decryption on drive {drive_letter}...")
    try:
        subprocess.run(
            ["powershell", "-Command", f"Disable-BitLocker -MountPoint {drive_letter}:"],
            check=True
        )
        logging.info(f"BitLocker disabled on {drive_letter}. Decryption started.")
        print(f"BitLocker disabled and decryption started on drive {drive_letter}.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error disabling BitLocker: {e}")
        print(f"Error disabling BitLocker: {e}")
        return

def main():
    drive_letter = input("Enter the drive letter to decrypt (e.g., C, D): ").upper()
    # Call the function to disable BitLocker and decrypt the drive
    disable_bitlocker(drive_letter)

if __name__ == "__main__":
    main()